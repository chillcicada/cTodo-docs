import{_ as s,c as e,o as i,V as a}from"./chunks/framework.rRQg7MiC.js";const f=JSON.parse('{"title":"Principle","description":"","frontmatter":{},"headers":[],"relativePath":"principle.md","filePath":"principle.md","lastUpdated":1711102867000}'),n={name:"principle.md"},t=a(`<h1 id="principle" tabindex="-1">Principle <a class="header-anchor" href="#principle" aria-label="Permalink to &quot;Principle&quot;">​</a></h1><blockquote><p>Many of the code principles will be automatically adhered to by eslint and husky and so on, so you don&#39;t need to worry about them. But it&#39;s very recommended for you to have read and familiarized yourself with these principles in advance.</p></blockquote><h2 id="ctodo" tabindex="-1">cTodo <a class="header-anchor" href="#ctodo" aria-label="Permalink to &quot;cTodo&quot;">​</a></h2><p>Use <code>css</code> not <code>scss</code> or <code>less</code></p><p>Explain: cTodo haven&#39;t decided the final framework for the web extension, for migration, we use <code>css</code> only. Due to the framework used in this project not being finalized yet, for the convenience of migration, please refrain from using style sheet formats such as sass, less, scss, and stylus.</p><blockquote><p>Well, this is a recommendation, not a rule. If you have a good reason to use them, you can use scss.</p></blockquote><p>Refrain from using <code>export default</code> in <code>ts</code> files, expect for <code>vue</code> files.</p><p>Top level function should be declared via <code>function</code> instead of arrow function, but inner function is recommended to be declared via arrow function instead of <code>function</code>.</p><p>For example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// recommended and required by eslint</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// recommended</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// not recommended</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10),o=[t];function l(p,d,c,r,h,k){return i(),e("div",null,o)}const m=s(n,[["render",l]]);export{f as __pageData,m as default};
