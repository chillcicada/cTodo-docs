import{_ as e,c as t,o,V as a}from"./chunks/framework.rRQg7MiC.js";const f=JSON.parse('{"title":"Design specification","description":"","frontmatter":{},"headers":[],"relativePath":"design.md","filePath":"design.md","lastUpdated":1711102867000}'),r={name:"design.md"},i=a('<h1 id="design-specification" tabindex="-1">Design specification <a class="header-anchor" href="#design-specification" aria-label="Permalink to &quot;Design specification&quot;">​</a></h1><h2 id="ctodo-client" tabindex="-1">cTodo (cTodo - client) <a class="header-anchor" href="#ctodo-client" aria-label="Permalink to &quot;cTodo (cTodo - client) {#ctodo-client}&quot;">​</a></h2><p>The cTodo (client) is released under the <a href="https://mit-license.org" target="_blank" rel="noreferrer">MIT</a> License, you can get the source code from <a href="https://github.com/chillcicada/ctodo" target="_blank" rel="noreferrer">GitHub</a>.</p><h3 id="design" tabindex="-1">Design <a class="header-anchor" href="#design" aria-label="Permalink to &quot;Design&quot;">​</a></h3><h3 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-label="Permalink to &quot;Development&quot;">​</a></h3><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>The cTodo (client) requires <a href="https://nodejs.org" target="_blank" rel="noreferrer">Node</a> &gt;= 18.0.0, and it uses <a href="https://pnpm.io" target="_blank" rel="noreferrer">pnpm</a> as the package manager. <strong>Please ensure that you have installed and configured Node and pnpm before you start.</strong></p></div><p>Run <code>corepack enable</code> to ensure that pnpm is enabled. Then run <code>pnpm i</code> to download the dependencies. If you crash the error <code>pnpm: command not found</code>, you can install pnpm globally via <code>npm i -g pnpm</code> and reboot your ide or terminal, or check your environment variables. Also, it&#39;s recommended to use the <a href="https://code.visualstudio.com" target="_blank" rel="noreferrer">VSCode</a> as the editor.</p><p>Some scripts:</p><ul><li><code>pnpm dev</code>: Start the development server for chrome, <strong>this requires you have chrome installed</strong>. <ul><li><code>pnpm dev:firefox</code>: Start the development server for firefox, <strong>this requires you have firefox installed</strong>.</li></ul></li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>This project use <a href="https://wxt.dev" target="_blank" rel="noreferrer">wxt</a> as the development framework.</p><p>The wxt haven&#39;t completely supported the HMR of content scripts, so you need to refresh the extension manually after you modify the content scripts.</p></div><ul><li><code>pnpm build</code>: Build the extension for production, the output can be found at <code>&lt;root&gt;/.output/&lt;target&gt;</code>. The default target is <code>chrome-mv3</code>. <ul><li><code>pnpm build:firefox</code>: Build the extension for firefox, the output can be found at <code>&lt;root&gt;/.output/firefox-mv2</code>.</li></ul></li><li><code>pnpm zip</code>: Zip the extension for distribution, the output can be found at <code>&lt;root&gt;/.output/&lt;target&gt;.zip</code>. The default target is <code>chrome-mv3</code>. <ul><li><code>pnpm zip:firefox</code>: Zip the extension for firefox, the output can be found at <code>&lt;root&gt;/.output/firefox-mv2.zip</code>.</li></ul></li></ul><ul><li><code>pnpm postinstall</code>: Run the postinstall script to generate the necessary files for development. This script will run before the above scripts executing or after the dependencies updating automatically.</li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>You can load the unpacked extension from the output directory to test the extension in your browser, this requires you enable the developer mode in your browser. Still, i recommend to use the <code>pnpm dev</code> to develop the extension.</p></div><ul><li><code>pnpm lint</code>: Run the linter to check the code style. <ul><li><code>pnpm lint:fix</code>: Run the linter to check the code style and fix the code style automatically.</li></ul></li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>The linter and formatter are based on <a href="https://eslint.org" target="_blank" rel="noreferrer">eslint</a>.</p></div><ul><li><code>pnpm test</code>: Run the test cases. <ul><li><code>pnpm test:ui</code>: Run the test cases, this will provide a UI to view and interact with the tests.</li><li><code>pnpm test:watch</code>: Run the test cases and watch the file changes.</li><li><code>pnpm test:coverage</code>: Run the test cases and generate the coverage report.</li></ul></li></ul><p>If you want to test a single file, you can run <code>pnpm test -- path/to/test-file.{spec,test}.ts</code> or <code>pnpm test:watch -- path/to/test-file.{spec,test}.ts</code>.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>The test cases are based on <a href="https://vitest.dev" target="_blank" rel="noreferrer">vitest</a>.</p><p>It&#39;s very recommended to use the vscode extension vitest to directly run the single test cases in the editor instead of the cli.</p><p>There has no good tool that has good e2e testing support for web extensions currently, <s>so i have no plan to make an e2e testing solution for now</s>.</p></div><ul><li><code>pnpm prepare</code>: This script is used for pre-commit hook, it will run the linter and test cases before you commit your code.</li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>The pre-commit hook is based on <a href="https://typicode.github.io/husky" target="_blank" rel="noreferrer">husky</a> and <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noreferrer">lint-staged</a>.</p><p><strong>This means that you can&#39;t commit your code if the linter or test cases are failed.</strong> If you really want to commit your code, you can use <code>git commit --no-verify</code> to bypass the pre-commit hook, which is badly not recommended.</p></div><p>Other scripts:</p><ul><li><code>pnpm update</code>: Update the dependencies, or you can use <code>(npx) taze major -I</code> to update the dependencies, hint: taze is not a dependency of this project, you can install it via <code>npm i -g taze</code>.</li></ul><h3 id="plugin-api" tabindex="-1">Plugin API <a class="header-anchor" href="#plugin-api" aria-label="Permalink to &quot;Plugin API&quot;">​</a></h3><h2 id="ctodo-server" tabindex="-1">cTodo - server <a class="header-anchor" href="#ctodo-server" aria-label="Permalink to &quot;cTodo - server&quot;">​</a></h2><h3 id="design-1" tabindex="-1">Design <a class="header-anchor" href="#design-1" aria-label="Permalink to &quot;Design&quot;">​</a></h3><h3 id="development-1" tabindex="-1">Development <a class="header-anchor" href="#development-1" aria-label="Permalink to &quot;Development&quot;">​</a></h3><h2 id="ctodo-docs" tabindex="-1">cTodo - docs <a class="header-anchor" href="#ctodo-docs" aria-label="Permalink to &quot;cTodo - docs&quot;">​</a></h2><p>The cTodo-docs is released under the <a href="https://creativecommons.org/licenses/by-nc-sa/4.0" target="_blank" rel="noreferrer">CC BY-NC-SA 4.0</a> License.</p><p>The cTodo-docs uses the <a href="https://vitepress.dev" target="_blank" rel="noreferrer">vitepress</a> to generate the docs, and uses the <a href="https://sli.dev" target="_blank" rel="noreferrer">slidev</a> to generate the slides.</p><h3 id="development-2" tabindex="-1">Development <a class="header-anchor" href="#development-2" aria-label="Permalink to &quot;Development&quot;">​</a></h3><p>Please refer to <a href="https://github.com/chillcicada/ctodo-docs#readme" target="_blank" rel="noreferrer">https://github.com/chillcicada/ctodo-docs#readme</a></p><h2 id="contribution" tabindex="-1">Contribution <a class="header-anchor" href="#contribution" aria-label="Permalink to &quot;Contribution&quot;">​</a></h2><p>If you want to make a contribution, please ensure that you have read the <a href="./principle">principle</a> before.</p>',33),n=[i];function s(c,l,d,p,h,u){return o(),t("div",null,n)}const g=e(r,[["render",s]]);export{f as __pageData,g as default};
